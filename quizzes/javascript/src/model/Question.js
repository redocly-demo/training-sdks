/**
 * Quizzes
 * Quizzes API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuestionChoices from './QuestionChoices';

/**
 * The Question model module.
 * @module model/Question
 * @version 1.0.0
 */
class Question {
    /**
     * Constructs a new <code>Question</code>.
     * @alias module:model/Question
     * @param type {Object} 
     * @param question {Object} 
     * @param correctAnswer {Object} 
     */
    constructor(type, question, correctAnswer) { 
        
        Question.initialize(this, type, question, correctAnswer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, question, correctAnswer) { 
        obj['type'] = type;
        obj['question'] = question;
        obj['correctAnswer'] = correctAnswer;
    }

    /**
     * Constructs a <code>Question</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Question} obj Optional instance to populate.
     * @return {module:model/Question} The populated <code>Question</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Question();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], Object);
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], Object);
            }
            if (data.hasOwnProperty('choices')) {
                obj['choices'] = QuestionChoices.constructFromObject(data['choices']);
            }
            if (data.hasOwnProperty('correctAnswer')) {
                obj['correctAnswer'] = ApiClient.convertToType(data['correctAnswer'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Question</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Question</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Question.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `choices`
        if (data['choices']) { // data not null
          QuestionChoices.validateJSON(data['choices']);
        }

        return true;
    }


}

Question.RequiredProperties = ["type", "question", "correctAnswer"];

/**
 * @member {Object} type
 */
Question.prototype['type'] = undefined;

/**
 * @member {Object} question
 */
Question.prototype['question'] = undefined;

/**
 * @member {module:model/QuestionChoices} choices
 */
Question.prototype['choices'] = undefined;

/**
 * @member {Object} correctAnswer
 */
Question.prototype['correctAnswer'] = undefined;






export default Question;

