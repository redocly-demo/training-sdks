/**
 * Badges
 * Badges API allows you to create Badges rules that can be applied to particular users.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@impossiblemissionsforce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Badge from '../model/Badge';
import GetBadge401Response from '../model/GetBadge401Response';
import PostBadgesRequest from '../model/PostBadgesRequest';

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBadge operation.
     * @callback module:api/DefaultApi~getBadgeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Badge>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get badges
     * @param {module:api/DefaultApi~getBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Badge>}
     */
    getBadge(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IMF-KEY'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = [Badge];
      return this.apiClient.callApi(
        '/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBadges operation.
     * @callback module:api/DefaultApi~postBadgesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Badge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a badge
     * @param {module:model/PostBadgesRequest} postBadgesRequest Badge definition with icon and requirements.
     * @param {module:api/DefaultApi~postBadgesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Badge}
     */
    postBadges(postBadgesRequest, callback) {
      let postBody = postBadgesRequest;
      // verify the required parameter 'postBadgesRequest' is set
      if (postBadgesRequest === undefined || postBadgesRequest === null) {
        throw new Error("Missing the required parameter 'postBadgesRequest' when calling postBadges");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IMF-KEY'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Badge;
      return this.apiClient.callApi(
        '/badges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
