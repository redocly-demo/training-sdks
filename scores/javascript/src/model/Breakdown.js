/**
 * Scores API
 * Scores API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Breakdown model module.
 * @module model/Breakdown
 * @version 1.0.0
 */
class Breakdown {
    /**
     * Constructs a new <code>Breakdown</code>.
     * @alias module:model/Breakdown
     * @param question {String} 
     * @param choices {Object.<String, String>} 
     * @param answer {String} 
     * @param answeredAt {Date} 
     */
    constructor(question, choices, answer, answeredAt) { 
        
        Breakdown.initialize(this, question, choices, answer, answeredAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, question, choices, answer, answeredAt) { 
        obj['question'] = question;
        obj['choices'] = choices;
        obj['answer'] = answer;
        obj['answeredAt'] = answeredAt;
    }

    /**
     * Constructs a <code>Breakdown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Breakdown} obj Optional instance to populate.
     * @return {module:model/Breakdown} The populated <code>Breakdown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Breakdown();

            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
            if (data.hasOwnProperty('choices')) {
                obj['choices'] = ApiClient.convertToType(data['choices'], {'String': 'String'});
            }
            if (data.hasOwnProperty('correctAnswer')) {
                obj['correctAnswer'] = ApiClient.convertToType(data['correctAnswer'], 'String');
            }
            if (data.hasOwnProperty('answer')) {
                obj['answer'] = ApiClient.convertToType(data['answer'], 'String');
            }
            if (data.hasOwnProperty('answeredAt')) {
                obj['answeredAt'] = ApiClient.convertToType(data['answeredAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Breakdown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Breakdown</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Breakdown.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }
        // ensure the json data is a string
        if (data['correctAnswer'] && !(typeof data['correctAnswer'] === 'string' || data['correctAnswer'] instanceof String)) {
            throw new Error("Expected the field `correctAnswer` to be a primitive type in the JSON string but got " + data['correctAnswer']);
        }
        // ensure the json data is a string
        if (data['answer'] && !(typeof data['answer'] === 'string' || data['answer'] instanceof String)) {
            throw new Error("Expected the field `answer` to be a primitive type in the JSON string but got " + data['answer']);
        }

        return true;
    }


}

Breakdown.RequiredProperties = ["question", "choices", "answer", "answeredAt"];

/**
 * @member {String} question
 */
Breakdown.prototype['question'] = undefined;

/**
 * @member {Object.<String, String>} choices
 */
Breakdown.prototype['choices'] = undefined;

/**
 * @member {String} correctAnswer
 */
Breakdown.prototype['correctAnswer'] = undefined;

/**
 * @member {String} answer
 */
Breakdown.prototype['answer'] = undefined;

/**
 * @member {Date} answeredAt
 */
Breakdown.prototype['answeredAt'] = undefined;






export default Breakdown;

